name: Deploy StackGuard to EC2

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (using OIDC role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image to Amazon ECR
        run: |
          # These are now correctly pulled from Repository Secrets
          docker build -t "${{ secrets.ECR_REPOSITORY }}" .
          docker tag "${{ secrets.ECR_REPOSITORY }}":latest "${{ secrets.ECR_URI }}":latest
          docker push "${{ secrets.ECR_URI }}":latest

      - name: Deploy to EC2 Instance via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_INSTANCE_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            echo "Starting deployment on EC2 instance..."

            # Authenticate Docker to ECR on the EC2 instance
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin "${{ secrets.ECR_URI }}"

            # Pull the latest Docker image from ECR
            docker pull "${{ secrets.ECR_URI }}":latest

            # Stop and remove the old running container (if it exists)
            docker stop stackguard-task || true
            docker rm stackguard-task || true

            # Run a new container from the latest image
            # All app-specific variables/secrets are now referenced from repository-level.
            docker run -d \
              --name stackguard-task \
              -p 8080:8080 \
              --restart unless-stopped \
              -e PORT="${{ vars.PORT }}" \
              -e TEAMS_CLIENT_ID="${{ vars.TEAMS_CLIENT_ID }}" \
              -e TEAMS_CLIENT_SECRET="${{ secrets.TEAMS_CLIENT_SECRET }}" \
              -e TENANT_ID="${{ vars.TENANT_ID }}" \
              -e SECURITY_CHANNEL_ID="${{ vars.SECURITY_CHANNEL_ID }}" \
              -e MONITORING_INTERVAL="${{ vars.MONITORING_INTERVAL }}" \
              -e MOCK_MODE="${{ vars.MOCK_MODE }}" \
              -e LOG_LEVEL="${{ vars.LOG_LEVEL }}" \
              "${{ secrets.ECR_URI }}":latest

            # Clean up old Docker images to save space
            docker image prune -f

            echo "Deployment completed on EC2!"
